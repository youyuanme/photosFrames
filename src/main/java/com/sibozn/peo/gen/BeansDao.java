package com.sibozn.peo.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sibozn.peo.bean.Beans;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BEANS".
*/
public class BeansDao extends AbstractDao<Beans, Long> {

    public static final String TABLENAME = "BEANS";

    /**
     * Properties of entity Beans.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Icon = new Property(1, String.class, "icon", false, "ICON");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Abstract = new Property(3, String.class, "Abstract", false, "ABSTRACT");
        public final static Property Topic = new Property(4, String.class, "topic", false, "TOPIC");
        public final static Property Description = new Property(5, String.class, "Description", false, "DESCRIPTION");
        public final static Property Downlink = new Property(6, String.class, "downlink", false, "DOWNLINK");
        public final static Property Uplink = new Property(7, String.class, "uplink", false, "UPLINK");
        public final static Property Effectlink = new Property(8, String.class, "effectlink", false, "EFFECTLINK");
        public final static Property Landscape = new Property(9, String.class, "landscape", false, "LANDSCAPE");
        public final static Property Price = new Property(10, String.class, "price", false, "PRICE");
        public final static Property Online = new Property(11, String.class, "online", false, "ONLINE");
        public final static Property Feature = new Property(12, String.class, "feature", false, "FEATURE");
        public final static Property Rank = new Property(13, String.class, "rank", false, "RANK");
        public final static Property IsDownload = new Property(14, String.class, "isDownload", false, "IS_DOWNLOAD");
    }


    public BeansDao(DaoConfig config) {
        super(config);
    }
    
    public BeansDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BEANS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ICON\" TEXT," + // 1: icon
                "\"NAME\" TEXT," + // 2: name
                "\"ABSTRACT\" TEXT," + // 3: Abstract
                "\"TOPIC\" TEXT," + // 4: topic
                "\"DESCRIPTION\" TEXT," + // 5: Description
                "\"DOWNLINK\" TEXT," + // 6: downlink
                "\"UPLINK\" TEXT," + // 7: uplink
                "\"EFFECTLINK\" TEXT," + // 8: effectlink
                "\"LANDSCAPE\" TEXT," + // 9: landscape
                "\"PRICE\" TEXT," + // 10: price
                "\"ONLINE\" TEXT," + // 11: online
                "\"FEATURE\" TEXT," + // 12: feature
                "\"RANK\" TEXT," + // 13: rank
                "\"IS_DOWNLOAD\" TEXT);"); // 14: isDownload
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BEANS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Beans entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(2, icon);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String Abstract = entity.getAbstract();
        if (Abstract != null) {
            stmt.bindString(4, Abstract);
        }
 
        String topic = entity.getTopic();
        if (topic != null) {
            stmt.bindString(5, topic);
        }
 
        String Description = entity.getDescription();
        if (Description != null) {
            stmt.bindString(6, Description);
        }
 
        String downlink = entity.getDownlink();
        if (downlink != null) {
            stmt.bindString(7, downlink);
        }
 
        String uplink = entity.getUplink();
        if (uplink != null) {
            stmt.bindString(8, uplink);
        }
 
        String effectlink = entity.getEffectlink();
        if (effectlink != null) {
            stmt.bindString(9, effectlink);
        }
 
        String landscape = entity.getLandscape();
        if (landscape != null) {
            stmt.bindString(10, landscape);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(11, price);
        }
 
        String online = entity.getOnline();
        if (online != null) {
            stmt.bindString(12, online);
        }
 
        String feature = entity.getFeature();
        if (feature != null) {
            stmt.bindString(13, feature);
        }
 
        String rank = entity.getRank();
        if (rank != null) {
            stmt.bindString(14, rank);
        }
 
        String isDownload = entity.getIsDownload();
        if (isDownload != null) {
            stmt.bindString(15, isDownload);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Beans entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(2, icon);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String Abstract = entity.getAbstract();
        if (Abstract != null) {
            stmt.bindString(4, Abstract);
        }
 
        String topic = entity.getTopic();
        if (topic != null) {
            stmt.bindString(5, topic);
        }
 
        String Description = entity.getDescription();
        if (Description != null) {
            stmt.bindString(6, Description);
        }
 
        String downlink = entity.getDownlink();
        if (downlink != null) {
            stmt.bindString(7, downlink);
        }
 
        String uplink = entity.getUplink();
        if (uplink != null) {
            stmt.bindString(8, uplink);
        }
 
        String effectlink = entity.getEffectlink();
        if (effectlink != null) {
            stmt.bindString(9, effectlink);
        }
 
        String landscape = entity.getLandscape();
        if (landscape != null) {
            stmt.bindString(10, landscape);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(11, price);
        }
 
        String online = entity.getOnline();
        if (online != null) {
            stmt.bindString(12, online);
        }
 
        String feature = entity.getFeature();
        if (feature != null) {
            stmt.bindString(13, feature);
        }
 
        String rank = entity.getRank();
        if (rank != null) {
            stmt.bindString(14, rank);
        }
 
        String isDownload = entity.getIsDownload();
        if (isDownload != null) {
            stmt.bindString(15, isDownload);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Beans readEntity(Cursor cursor, int offset) {
        Beans entity = new Beans( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // icon
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Abstract
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // topic
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Description
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // downlink
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // uplink
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // effectlink
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // landscape
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // price
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // online
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // feature
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // rank
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // isDownload
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Beans entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIcon(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAbstract(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTopic(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDescription(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDownlink(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUplink(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEffectlink(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLandscape(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPrice(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setOnline(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setFeature(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setRank(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setIsDownload(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Beans entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Beans entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Beans entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
